python manage.py shell
from news.models import Author
from django.contrib.auth.models import User
user1 = User(username='user1',password='user1') 
user1.save()
user2 = User(username='user2',password='user2') 
user2.save()                                    
auth1 = Author(user=user1)                                   
auth1.save()
auth2 = Author(user=user2) 
auth2.save() 
from news.models import Category
cat1 = Category(name='categoy1')
cat1.save()
cat2 = Category(name='categoy1')
cat2.save()
cat3 = Category(name='categoy1')
cat3.save()
cat4 = Category(name='categoy1')
cat4.save()
from news.models import Post
post1 = Post(author=auth1, type='1', title='Title1', description='''Основы языка пройдены. Начало изучению веб-фреймворка Django положено. С этого момента мы начнем разработку двух проектов. В юнитах мы будем разбирать, как можн
о было бы создать интернет-магазин, а в рамках практических заданий вам нужно развивать свой собственный проект – новостной портал. Если подумать, то между такими проектами не так много отличий. В магазине мы ищем товары и знакомимс
я с их описаниями, на новостном портале мы читаем статьи. Товар и статья отличаются по смыслу, но могут иметь похожую реализацию в программах. Или, например, отзывы к товарам почти не отличаются от комментариев к статьям. Поэтому не
 бойтесь проводить аналогии в течении прочтения юнитов и думать о том, как знания про реализацию интернет-магазина могут вам помочь в создании новостного портала.''')
post1.save()
post2 = Post(author=auth2, type='2', title='Title2', description='''В нашей повседневной жизни происходит ровно то же самое. Каждый документ: паспорт, страховое свидетельство или документ о собственности, имеет свой уникальный н
омер, позволяющий найти его в списке всех документов. Когда вы получаете онлайн-заказ в точке выдачи, вас, как правило, попросят назвать номер заказа — уникальное число (или набор цифр с буквами), чтобы быстро и эффективно его найти
. В библиотеке мы встречаем библиотечные индексы, в обычных магазинах штрих-коды.''')
post2.save()
post3 = Post(author=auth1, type='1', title='Title3', description='''В ходе этого модуля вы шаг за шагом изучали принципы построения баз данных и создания моделей, а также размышляли над собственным приложением News Portal. Итого
вое задание этого модуля заключается в создании этого приложения (пока что только моделей). Таким образом получится базовый проект, в котором будут выполняться задания следующих модулей.''')
post3.save()
postcat1 = PostCategory(post=post1, category=Category.objects.get(id=1)) 
postcat1.save()                                                          
postcat2 = PostCategory(post=post1, category=Category.objects.get(id=2)) 
postcat2.save()                                                          
postcat3 = PostCategory(post=post2, category=Category.objects.get(id=3)) 
postcat3.save()                                                          
postcat4 = PostCategory(post=post2, category=Category.objects.get(id=2)) 
postcat4.save()                                                          
postcat5 = PostCategory(post=post3, category=Category.objects.get(id=4)) 
postcat5.save() 
comment1 = Comment(post=post1, user=auth1, text='test1')
comment1.save()
comment2 = Comment(post=post2, user=auth1, text='test2')
comment2.save()
comment3 = Comment(post=post3, user=auth2, text='test3')
comment3 = Comment(post=post3, user=auth2, text='test3')
comment3.save()
comment4 = Comment(post=post1, user=auth2, text='test4')
comment4.save()
comment4.save()
comment2.dislike()
comment2.dislike()
comment2.dislike()
comment2.dislike()
comment4.dislike() 
comment4.dislike()
comment1.like()    
comment1.like()
comment1.like()
comment1.like()
comment1.like()
comment3.like() 
comment3.like()
comment3.like()
post1.like()
post1.like() 
post1.like()
post1.like()
post1.like()
post1.like()
post1.like()
post3.like() 
post3.like()
post3.like()
post2.dislike()
post2.dislike()
post2.dislike()
post2.dislike()
post2.dislike()
post2.dislike()
post2.dislike()
post2.dislike()
post2.dislike()
post2.dislike()
auth1.update_rating()
auth2.update_rating()
